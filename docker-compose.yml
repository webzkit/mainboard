name: zkit

networks:
    frontend:
        driver: ${NETWORKS_DRIVER}

include:
    - ./engine/service.yml
    - ./avatar/service.yml
    #- ./ecommerce/service.yml
    #- ./multimedia/service.yml
    #- ./content/service.yml

services:
    #### Registry & discovery service #################################
    consul:
        container_name: zkit_monitor_consul
        build:
            context: ./containers/monitors/consul
            dockerfile: Dockerfile
        command: consul agent -dev -client 0.0.0.0
        volumes:
            - ${DATA_PATH_HOST}/consul/data:/consul/data
            - ${DATA_PATH_HOST}/consul/config:/consul/config
        ports:
            - 8500:8500
            - 8600:8600/udp
        depends_on:
            - api_gateway
        networks:
            - frontend

    #### Api Gateway service ###########################################
    api_gateway:
        container_name: zkit_api_gateway
        build:
            context: ./api_gateway
            dockerfile: Dockerfile
            args:
                - PYTHON_VERSION=${PYTHON_VERSION}
        env_file:
            - .env
        ports:
            - "80:8000"
        volumes:
            - ./api_gateway/src/:/zkit/
            - ${DATA_PATH_HOST}/api_gateway/data/:/keys/
        networks:
            - frontend
        depends_on:
            - engine
            - avatar
            - redis
            - clickhouse
        restart: unless-stopped

    ### Postgres DB #########################################
    postgres:
        container_name: zkit_postgres
        build:
            context: ./containers/postgres
            args:
                - POSTGRES_VERSION=${POSTGRES_VERSION}
        ## for develop
        command: postgres -c log_destination=stderr -c log_statement=all -c log_connections=on -c log_disconnections=on
        volumes:
            - ${DATA_PATH_HOST}/postgres:/var/lib/postgresql/data/
        environment:
            POSTGRES_DB: ${POSTGRES_DB:-dbname}
            POSTGRES_USER: ${POSTGRES_USER:-username}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
            PGDATA: /var/lib/postgresql/data/
        ports:
            - "${POSTGRES_PORT}:5432"
        networks:
            - frontend
        #depends_on:
        #    - pgadmin
        restart: unless-stopped

    ### mongo DB #########################################
    mongo:
        container_name: zkit_mongo
        build:
            context: ./containers/mongo
            args:
                - MONGO_VERSION=${MONGO_VERSION}
        restart: unless-stopped
        volumes:
            - ${DATA_PATH_HOST}/mongodb:/data/db
        environment:
            MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME}
            MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
        ports:
            - ${MONGO_PORT}:27017
        networks:
            - frontend

    ### Redis ##############################################
    redis:
        container_name: zkit_redis
        build:
            context: ./containers/redis
            args:
                - REDIS_VERSION=${REDIS_VERSION}
        restart: unless-stopped
        command: redis-server --requirepass ${REDIS_PASSWORD}
        volumes:
            - ${DATA_PATH_HOST}/redis:/data
        ports:
            - ${REDIS_PORT}:6379
        networks:
            - frontend

    ## For developer
    ### pgAdmin ##############################################
    pgadmin:
        container_name: zkit_pgadmin
        build:
            context: ./containers/pgadmin
        environment:
            PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-info@info.com}
            PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-password}
        volumes:
            - ${DATA_PATH_HOST}/pgadmin:/root/.pgadmin
        ports:
            - "${PGADMIN_PORT:-5050}:80"
        networks:
            - frontend
        restart: unless-stopped

    ##
    kafka:
        image: obsidiandynamics/kafka
        container_name: zkit_kafka
        restart: "no"
        ports:
            - "2181:2181"
            - "9093:9093"
        environment:
            KAFKA_LISTENERS: "INTERNAL://:29092,EXTERNAL://:9093"
            KAFKA_ADVERTISED_LISTENERS: "INTERNAL://kafka:29092,EXTERNAL://localhost:9093"
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT"
            KAFKA_INTER_BROKER_LISTENER_NAME: "INTERNAL"
            KAFKA_ZOOKEEPER_SESSION_TIMEOUT: "6000"
            KAFKA_RESTART_ATTEMPTS: "10"
            KAFKA_RESTART_DELAY: "5"
            ZOOKEEPER_AUTOPURGE_PURGE_INTERVAL: "0"
        healthcheck:
            test: nc -z localhost 29092 || exit
            interval: 10s
            timeout: 5s
            retries: 15
        networks:
            - frontend

    ##
    kafka-ui:
        image: provectuslabs/kafka-ui
        container_name: zkit_kafka_ui
        ports:
            - "7070:8080"
        restart: always
        environment:
            - KAFKA_CLUSTERS_0_NAME=local
            - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:29092
        networks:
            - frontend

    ## Logging
    clickhouse:
        image: clickhouse/clickhouse-server
        container_name: zkit_clickhouse
        volumes:
            - ${DATA_PATH_HOST}/clickhouse/data_dir:/var/lib/clickhouse
            - ./containers/clickhouse:/etc/clickhouse-server/users.d/
        ulimits:
            nofile:
                soft: 262144
                hard: 262144
        ports:
            - 9123:8123
            - 8002:9000
        networks:
            - frontend

    clickhouse-ui:
        image: spoonest/clickhouse-tabix-web-client
        container_name: zkit_clickhouse_ui
        networks:
            - frontend
        ports:
            - 7071:80
        environment:
            - CH_NAME=my_config
            - CH_HOST=clickhouse:9123
            - USER=myuser
            - PASSWORD=mypass

volumes:
    postgres:
        driver: ${VOLUMES_DRIVER}
    pgadmin:
        driver: ${VOLUMES_DRIVER}
    mongo:
        driver: ${VOLUMES_DRIVER}
